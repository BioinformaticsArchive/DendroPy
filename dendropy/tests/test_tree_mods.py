#! /usr/bin/env python

############################################################################
##  test_tree_mods.py
##
##  Part of the DendroPy library for phylogenetic computing.
##
##  Copyright 2008 Jeet Sukumaran and Mark T. Holder.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with this program. If not, see <http://www.gnu.org/licenses/>.
##
############################################################################

"""
Tests optional tree modifiers.
"""

import random
import unittest
import itertools
from dendropy import get_logger
import dendropy.tests
_LOG = get_logger("TreeModification")

### MODULE THAT WE ARE TESTING ###
from dendropy.trees import bounce_constrain
### MODULE THAT WE ARE TESTING ###

tol = 1e-5

class KTBTest(unittest.TestCase):
    def testKingmanTreeInSpeciesTree(self, ntax=10):
        output = [bounce_constrain(0.5, .5 - 0.05*i, 0.0, 1.0) for i in range(100)]
        ref = [(0.5, 0.5), (0.45, 0.47499999999999998), (0.4, 0.45), (0.34999999999999998, 0.42499999999999999), (0.29999999999999999, 0.4), (0.25, 0.375), (0.19999999999999996, 0.34999999999999998), (0.14999999999999997, 0.32499999999999996), (0.099999999999999978, 0.29999999999999999), (0.049999999999999989, 0.275), (0.0, 0.25), (0.05, 0.22954545454545455), (0.1, 0.21666666666666665), (0.15, 0.20961538461538459), (0.2, 0.20714285714285713), (0.25, 0.20833333333333331), (0.3, 0.2125), (0.35, 0.21911764705882353), (0.4, 0.2277777777777778), (0.45, 0.23815789473684212), (0.5, 0.25), (0.55, 0.2630952380952381), (0.6, 0.27727272727272728), (0.65, 0.29239130434782612), (0.7, 0.30833333333333335), (0.75, 0.32499999999999996), (0.8, 0.34230769230769231), (0.85, 0.36018518518518516), (0.9, 0.37857142857142867), (0.95, 0.39741379310344832), (1.0, 0.41666666666666669), (0.94999999999999996, 0.43467741935483872), (0.89999999999999991, 0.45), (0.84999999999999987, 0.46287878787878789), (0.79999999999999982, 0.47352941176470598), (0.75, 0.48214285714285721), (0.69999999999999996, 0.48888888888888893), (0.64999999999999991, 0.49391891891891893), (0.59999999999999987, 0.49736842105263157), (0.54999999999999982, 0.49935897435897436), (0.5, 0.5), (0.44999999999999973, 0.49939024390243897), (0.39999999999999991, 0.49761904761904763), (0.35, 0.49476744186046517), (0.29999999999999982, 0.49090909090909085), (0.25, 0.48611111111111116), (0.19999999999999973, 0.48043478260869565), (0.14999999999999991, 0.47393617021276602), (0.099999999999999645, 0.46666666666666667), (0.049999999999999822, 0.45867346938775505), (0.0, 0.45), (0.05, 0.4416666666666666), (0.1, 0.43461538461538463), (0.15, 0.42877358490566037), (0.2, 0.42407407407407405), (0.25, 0.42045454545454541), (0.3, 0.41785714285714287), (0.35, 0.41622807017543861), (0.4, 0.41551724137931034), (0.45, 0.41567796610169494), (0.5, 0.41666666666666669), (0.55, 0.41844262295081969), (0.6, 0.42096774193548392), (0.65, 0.4242063492063492), (0.7, 0.428125), (0.75, 0.43269230769230771), (0.8, 0.43787878787878792), (0.85, 0.44365671641791049), (0.9, 0.45), (0.95, 0.45688405797101456), (1.0, 0.4642857142857143), (0.94999999999999973, 0.47147887323943666), (0.89999999999999991, 0.4777777777777778), (0.84999999999999964, 0.48321917808219184), (0.79999999999999982, 0.48783783783783785), (0.75, 0.4916666666666667), (0.69999999999999973, 0.49473684210526325), (0.64999999999999991, 0.49707792207792206), (0.59999999999999964, 0.49871794871794872), (0.54999999999999982, 0.49968354430379752), (0.5, 0.5), (0.45, 0.49969135802469133), (0.39999999999999947, 0.49878048780487805), (0.34999999999999964, 0.49728915662650602), (0.29999999999999982, 0.49523809523809526), (0.25, 0.49264705882352944), (0.2, 0.48953488372093024), (0.14999999999999947, 0.48591954022988504), (0.099999999999999645, 0.4818181818181817), (0.049999999999999822, 0.47724719101123586), (0.0, 0.47222222222222221), (0.049999999999999822, 0.46730769230769231), (0.1, 0.4630434782608695), (0.15, 0.45940860215053758), (0.2, 0.45638297872340422), (0.25, 0.4539473684210526), (0.3, 0.45208333333333334), (0.35, 0.45077319587628867), (0.4, 0.45), (0.45, 0.44974747474747473)]
        self.assertEqual(len(ref), len(output))
        for i, j in itertools.izip(output, ref):
            self.assertTrue(abs(i[0] - j[0]) < tol, "final value of bounce wrong")
            self.assertTrue(abs(i[1] - j[1]) < tol, "mean value of bounce wrong")
            
if __name__ == "__main__":
    unittest.main()

